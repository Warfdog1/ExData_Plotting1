submit()
extract_numeric("class5")
?mutate
??mutate
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class = extract_numeric(class))
print
submit()
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class = extract_numeric(class))%>%
print
submit()
students4
student_info <- students4 %>%
select(id,name,sex ) %>%
print
submit()
student_info <- students4 %>%
select(id, name, sex) %>%
unique(student_info)%>%
print
?unique
student_info <- students4 %>%
select(id, name, sex) %>%
unique(student_info, drop = FALSE)%>%
print
student_info <- students4 %>%
select(id, name, sex) %>%
unique(student4)%>%
print
student_info <- students4 %>%
select(id, name, sex) %>%
unique(student_info)%>%
print
student_info <- students4 %>%
select(id, name, sex) %>%
unique(id)%>%
print
student_info <- students4 %>%
select(id, name, sex) %>%
unique(id, incomparables = FALSE)%>%
print
student_info <- students4 %>%
select(id, name, sex) %>%
unique(student_info, incomparables = FALSE, fromLast = FALSE,
print(student_info)
student_info <- students4 %>%
select(id, name, sex) %>%
unique(student_info, incomparables = FALSE, fromLast = FALSE,
nmax = NA)%>%
print(student_info)
student_info <- students4 %>%
select(id, name, sex) %>%
unique(student_info, incomparables = FALSE, fromLast = FALSE,
nmax = NA)%>%
print(student_info)
student_info <- students4 %>%
select(id, name, sex) %>%
unique(student_info, fromLast = FALSE,
nmax = NA)%>%
print(student_info)
student_info <- students4 %>%
select(id, name, sex) %>%
unique(student_info, nmax = NA)%>%
print(student_info)
unique(student_info)%>%
student_info <- students4 %>%
select(id, name, sex) %>%
unique(student_info)%>%
print(student_info)
student_info <- students4 %>%
select(id, name, sex) %>%
unique(name)%>%
print(student_info)
reset()
student_info <- students4 %>%
select(id, name, sex) %>%
### Your code here %>%
print
student_info <- students4 %>%
select(id, name, sex) %>%
unique() %>%
prin
student_info <- students4 %>%
select(id, name, sex) %>%
unique() %>%
print
submit()
gradebook <- students4 %>%
select(id, class, midterm, final) %>%
print
submit()
passed
failed
?mutate
gradebook <- students4 %>%
select(id, class, midterm, final) %>%
passed <- passed %>% mutate(status = "passed")%>%
prin
gradebook <- students4 %>%
select(id, class, midterm, final) %>%
passed <- passed %>% mutate(status = "passed")%>%
print
gradebook <- students4 %>%
select(id, class, midterm, final) %>%
passed <- passed %>% mutate(status = "passed")%>%
print
submit()
passed <- passed %>% mutate(status = "passed")%>%
print
passed <- passed %>% mutate(status = "passed")%>%
passed <- passed %>% mutate(status = "passed")%>%
passed <- passed %>% mutate(status = "passed")%>%
print
submit()
info()
submit()
gradebook <- students4 %>%
select(id, class, midterm, final) %>%
print
| passed <- passed %>% mutate(status = "passed")%>%
print
| passed <- passed %>% mutate(status = "passed")%>%
print
gradebook <- students4 %>%
select(id, class, midterm, final) %>%
print
gradebook <- students4 %>%
select(id, class, midterm, final) %>%
print
passed <- passed %>% mutate(status = "passed")%>%
print
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
bind_rows(passed,failed)
sat
sat %>%
select(-contains(total)) %>%
gather(part_sex, count, -score_range) %>%
### <Your call to separate()> %>%
print
sat %>%
gather(part_sex, count, -score_range) %>%
print
sat %>%
select(-contains(total)) %>%
gather(part_sex, count, -score_range) %>%
### <Your call to separate()> %>%
print
reset()
sat %>%
select(-contains(###)) %>%
gather(part_sex, count, -score_range) %>%
### <Your call to separate()> %>%
print
print
?select
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
### <Your call to separate()> %>%
print
?separate
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(part_sex, into = "part", "sex") %>%
print
submit()
?gather()
?separate()
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(part_sex, c("part", "sex")) %>%
print
submit()
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(part_sex, c("part", "sex")) %>%
group_by("part", "sex") %>%
mutate(total = sum(count),
prop = count / total
) %>% print
submit()
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(part_sex, c("part", "sex")) %>%
group_by(part, sex) %>%
mutate(total = sum(count),
prop = count / total
) %>% print
submit()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
today()
this_day <- today()
this_day
year()
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment<-now()
this_moment
minute(this_moment)
my_date<-ymd("1989-05-17")
my_date
class(my_date0
class(my_date)
class(my_date)
ymd("1989 May 17")
dmy( "March 12, 1975")
mdy("March 12, 1975")
mdy(2508198)
dmy(25081985)
ymd("192012")
ymd("--192012")
ymd("1920/1/2")
dtl
dt1
ymd_hms(dt1)
ymd_hms("03:22:14")
hms("03:22:14")
dt2
ymd("2014-05-14")
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(hmd)
this_moment <- update(this_moment)
update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment
?now
nyc <- now(tzone = "America/New_York")
nyc
depart <- nyc + days(2)
depart
depart<-update(nyc, hours (17) and minutes (34))
update(nyc, hours (17) and minutes (34))
depart <- update(nyc, hours (17), minutes (34))
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15), minutes(50)
arrive <- depart + hours(15)minutes(50)
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz("Asia/Hong_Kong")
arrive <- with_tz(arrive, tzone="Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tzone="Singapore")
mdy("June 17, 2008", tz = "Singapore")
mdy("June 17, 2008", tz = "Singapore")
mdy("June 17, 2008", tz = "Singapore")
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_timne
last_time
?new_interval
how_long <- new_interval(last_time, arrive)
s.period(how_long)
as.period(how_long)
stopwatch()
0
0
swirl(0)
library(swirl)
ls()
rm(list=ls())
library(swirl)
swirl
swirl()
quit()
library(swirl)
swirl(())
swirl9
swirl()
quit()
rm(list = ls())
library(swirl)
swirl()
View(pollution)
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(pp,)
quantile(ppm)
boxplot(ppm, col = "blue")
abline(ppm, h=12)
?abline
abline(h=12)
hist(ppm, col = "green")
rug(ppm)
low now
rug(low now)
rug("low now")
low
high
hist(ppm, col = "green", breaks = 100)
rug(ppm)
hist(pp,. col = "green")
hist(ppm, col = "green")
abline(v=12, lwd=2)
abline(v=median(ppm), col="magenta")
abline(v=median(ppm), col="magenta", lwd = 4)
names]
names
names(pollution)
reg = construct(pollution$region)
reg = table(pollution$region)
reg <- table(pollution$region)
reg
barplot(reg, col+"wheat", main = "Number of COunties in Each Region")
barplot(reg, col = "wheat", main = "Number of COunties in Each Region")
barplot(reg, col = "wheat", main = "Number of Counties in Each Region")
boxplot(data=pollution, col="red")
boxplot(pm25~region, data=pollution, col="red")
par(mfrow=c(2,1),mar=c(4,4,2,1))
east <- subset(pollution, ==east)
east <- subset(pollution, region==east)
east <- subset(pollution, region=="east")
head
head(east)
hist(east, col = "green")
hist(east$pm25, col = "green")
hist(region=="west")
hist()
help9
help()
hist(west$pm25, col = "green")
west <- subset(pollution, region=="west")
hist(subset(pollution,region=="west")$pm25, col = "green")
library(swirl)
swirl()
with(pollution, plot(latitude,pm25))
abline(12, lwd=2, lty=2)
abline(12, lwd=2, lty=2)
?abline
abline(h=12, lwd=2, lty=2)
plot(pollution$latitude,ppm, col=pollution$region)
abline(h=12, lwd=2, lty=2)
par(mfrow=c(1,2), mar=c(5,4,2,1))
west<-subset(pollution=="west")
west<-subset(pollution, region=="west")
plot(west$latitude, west$pm25, main="West")
east<-subset(pollution, region=="east")
plot(east$latitude, east$pm25, main = "East")
?Devices
faithful(plot(eruptions, waiting))
with(faithful, plot(eruptions, waiting))
title(main="Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
with(faithful, plot(eruptions, waiting))
title(main="Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions,waiting))
title(main="Old Faithful Geyser data")
dev.copy(png, file set = "geyserplot.png")
dev.copy(png, "geyserplot.png")
dev.copy(png, file = "geyserplot.png")
dev.off()
head(cars)
with(cars, plot(speed,dist))
text(mean(cars$speed,max(cars$dist), "SWIRL rules!")
text(mean(cars$speed,max(cars$dist), main="SWIRL rules!")
text(mean(cars$speed,max(cars$dist), main="SWIRL rules!")
text(mean(cars$speed,max(cars$dist), main="SWIRL rules!")
text(mean(cars$speed),max(cars$dist), main="SWIRL rules!")
text(mean(cars$speed),max(cars$dist),"SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp ~ Income | region, data=state, layout=c(4,1))
xyplot(Life.Exp ~ Income | region, data=state, layout=c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ, hwy, data=mpg)
library(swirl)
swirl()
head(airquality)
range(airquality$Ozone,na.rm=TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone~Month, airquality)
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone(ppb)", col.axis="blue"), col.lab="red")
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone(ppb)", col.axis="blue", col.lab="red")
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone
| (ppb)",col.axis="blue",col.lab="red")
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone
| (ppb)",col.axis="blue",col.lab="red")
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone
(ppb)",col.axis="blue",col.lab="red")
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone
(ppb)", col.axis="blue", col.lab="red")
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone")
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)",col.axis="blue",col.lab="red")
title(main = "Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone))
title(main = "Ozone and Wind in New York City")
length(par())
librar(swirl)
library(swirl)
swirl()
names(par())
par()$pin
par("fg")
par("pch")
par("lty")
plot(airquality$Wind, airquality$Ozone,type="n")
title(main="Wind and Ozone in NYC")
may <- subset(airquality[5])
may <- subset(airquality, Month==5)
plot(may, wind, ozone, col="blue")
plot(may, wind, ozone, col="blue")
info()
library(swirl)
swirl()
?par
?par()
View(may)
points(may$Wind,may$Ozone,col="blue",pch=17)
View(pollution)
notmay <- subset(airquality, Month!=5)
points(notmay$wind, notmay$ozone, pch=15)
points(notmay$wind, notmay$ozone, pch=8)
points(notmay$wind, notmay$ozone, pch=8, col="red")
points(notmay$Wind, notmay$Ozone, pch=8, col="red")
legend("topright", c(17,8), ("blue", "red"), ("May", "Other Months"))
legend("topright", c(17,8), c("blue", "red"), c("May", "Other Months"))
legend("topright", c(pch=17,8), c(col="blue", "red"), c(legend="May", "Other Months"))
View(may)
legend("topright", pch=c(17,8), col=c("blue", "red"), legend=c("May", "Other Months"))
abline(airquality$Wind, lty=2, lwd=2)
abline(v=airquality$Wind, lty=2, lwd=2)
abline(v=median(airquality$Wind),lty=2,lwd=2)
par(mfrow=(1,2))
par(mfrow=c(1,2))
plot(airquality$Wind, airquality$Ozone, main="Ozone and Wind")
plot(airquality$Ozone,airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
plot(airquality$Wind, airquality$Ozone, "Ozone and Wind")
View(pollution)
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Solar.R, airquality$Ozone, title="Ozone and Solar Radiation")
plot(airquality$Solar.R, airquality$Ozone, main="Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main="Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer=TRUE)
png("plot4.png", width=480, height=480)
par(mfrow = c(2, 2))
plot(data4, Global_Active_Power, type="l", xlab="", ylab="Global Active Power")
plot(data4, Voltage, type="l", xlab="datetime", ylab="Voltage")
plot(data4, Sub_Metering1, type="l", ylab="Energy sub metering", xlab="")
lines(data4, Sub_Metering2, type="l", col="red")
lines(data4, Sub_Metering3, type="l", col="blue")
legend("topright", c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),
lty=1, lwd=2.5, col=c("black", "red", "blue"), bty="n")
plot(data4, Global_Reactive_Power, type="l", xlab="datetime", ylab="Global_reactive_power")
dev.off()
dataread4<-read.table("household_power_consumption.txt", header=T, sep=";", stringsAsFactors = F, dec=".")
subdata4 <- dataread4[dataread4$Date %in% c("1/2/2007","2/2/2007"), ]
data4<- strptime(paste(subdata4$Date, subdata4$Time, sep=" "), "%d/%m/%Y %H:%M:%S")
Sub_Metering1 <- as.numeric(subdata4 [ , 7])
Sub_Metering2 <- as.numeric(subdata4 [ , 8])
Sub_Metering3 <- as.numeric(subdata4 [ , 9])
Voltage <- as.numeric(subdata4 [ , 5])
Global_Reactive_Power <- as.numeric(subdata4 [ , 4])
Global_Active_Power <- as.numeric(subdata4[ ,"Global_active_power"])
dataread4<-read.table("household_power_consumption.txt", header=T, sep=";", stringsAsFactors = F, dec=".")
setwd(choose.files())
setwd(choose.files())
setwd("C:/Users/FWarf/Exploratory_Data_Coursera/Project1")
dataread4<-read.table("household_power_consumption.txt", header=T, sep=";", stringsAsFactors = F, dec=".")
subdata4 <- dataread4[dataread4$Date %in% c("1/2/2007","2/2/2007"), ]
data4<- strptime(paste(subdata4$Date, subdata4$Time, sep=" "), "%d/%m/%Y %H:%M:%S")
Sub_Metering1 <- as.numeric(subdata4 [ , 7])
Sub_Metering2 <- as.numeric(subdata4 [ , 8])
Sub_Metering3 <- as.numeric(subdata4 [ , 9])
Voltage <- as.numeric(subdata4 [ , 5])
Global_Reactive_Power <- as.numeric(subdata4 [ , 4])
Global_Active_Power <- as.numeric(subdata4[ ,"Global_active_power"])
png("plot4.png", width=480, height=480)
par(mfrow = c(2, 2))
plot(data4, Global_Active_Power, type="l", xlab="", ylab="Global Active Power")
plot(data4, Voltage, type="l", xlab="datetime", ylab="Voltage")
plot(data4, Sub_Metering1, type="l", ylab="Energy sub metering", xlab="")
lines(data4, Sub_Metering2, type="l", col="red")
lines(data4, Sub_Metering3, type="l", col="blue")
legend("topright", c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),
lty=1, lwd=2.5, col=c("black", "red", "blue"), bty="n")
plot(data4, Global_Reactive_Power, type="l", xlab="datetime", ylab="Global_reactive_power")
dev.off
png("plot4.png", width=480, height=480)
par(mfrow = c(2, 2))
plot(data4, Global_Active_Power, type="l", xlab="", ylab="Global Active Power")
plot(data4, Voltage, type="l", xlab="datetime", ylab="Voltage")
plot(data4, Sub_Metering1, type="l", ylab="Energy sub metering", xlab="")
lines(data4, Sub_Metering2, type="l", col="red")
lines(data4, Sub_Metering3, type="l", col="blue")
legend("topright", c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),
lty=1, lwd=2.5, col=c("black", "red", "blue"), bty="n")
plot(data4, Global_Reactive_Power, type="l", xlab="datetime", ylab="Global_reactive_power")
dev.off()
